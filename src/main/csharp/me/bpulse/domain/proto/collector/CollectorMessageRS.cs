// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CollectorMessageRS.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace me.bpulse.domain.proto.collector {

  /// <summary>Holder for reflection information generated from CollectorMessageRS.proto</summary>
  public static partial class CollectorMessageRSReflection {

    #region Descriptor
    /// <summary>File descriptor for CollectorMessageRS.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CollectorMessageRSReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhDb2xsZWN0b3JNZXNzYWdlUlMucHJvdG8SCWNvbGxlY3RvciJ6CghQdWxz",
            "ZXNSUxIOCgZyc1RpbWUYASABKAMSLgoGc3RhdHVzGAIgASgOMh4uY29sbGVj",
            "dG9yLlB1bHNlc1JTLlN0YXR1c1R5cGUSDQoFZXJyb3IYAyABKAkiHwoKU3Rh",
            "dHVzVHlwZRIGCgJPSxAAEgkKBUVSUk9SEAFCJUgBqgIgbWUuYnB1bHNlLmRv",
            "bWFpbi5wcm90by5jb2xsZWN0b3JiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::me.bpulse.domain.proto.collector.PulsesRS), global::me.bpulse.domain.proto.collector.PulsesRS.Parser, new[]{ "RsTime", "Status", "Error" }, null, new[]{ typeof(global::me.bpulse.domain.proto.collector.PulsesRS.Types.StatusType) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PulsesRS : pb::IMessage<PulsesRS> {
    private static readonly pb::MessageParser<PulsesRS> _parser = new pb::MessageParser<PulsesRS>(() => new PulsesRS());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PulsesRS> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::me.bpulse.domain.proto.collector.CollectorMessageRSReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PulsesRS() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PulsesRS(PulsesRS other) : this() {
      rsTime_ = other.rsTime_;
      status_ = other.status_;
      error_ = other.error_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PulsesRS Clone() {
      return new PulsesRS(this);
    }

    /// <summary>Field number for the "rsTime" field.</summary>
    public const int RsTimeFieldNumber = 1;
    private long rsTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RsTime {
      get { return rsTime_; }
      set {
        rsTime_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::me.bpulse.domain.proto.collector.PulsesRS.Types.StatusType status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::me.bpulse.domain.proto.collector.PulsesRS.Types.StatusType Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PulsesRS);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PulsesRS other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RsTime != other.RsTime) return false;
      if (Status != other.Status) return false;
      if (Error != other.Error) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RsTime != 0L) hash ^= RsTime.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RsTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RsTime);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RsTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RsTime);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PulsesRS other) {
      if (other == null) {
        return;
      }
      if (other.RsTime != 0L) {
        RsTime = other.RsTime;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RsTime = input.ReadInt64();
            break;
          }
          case 16: {
            status_ = (global::me.bpulse.domain.proto.collector.PulsesRS.Types.StatusType) input.ReadEnum();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PulsesRS message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StatusType {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("ERROR")] Error = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
